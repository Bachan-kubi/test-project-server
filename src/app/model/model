
import { Schema, model, connect } from 'mongoose';
import { Student, UserName } from './student.interface';
import validator from 'validator';



const userNameSchema = new Schema<UserName>({
  firstName: { 
    type: String, 
    required: [true, "First name is must need!"], 
    trim: true, 
    maxlength: 20,
    minlength:3,
    // validate: {
    //   validator:function(value: string){
    //     const nameStr = value.charAt(0).toUpperCase() + value.slice(1);
    //     return nameStr === value;
    //   },
    //   message: '{VALUE} is not capitalize formate!'
      
    // }
  },
  middleName: { type: String, required: [true, "Middle name is must need!"], trim: true },
  lastName: { type: String, required: [true, "Last name is must need!",], trim: true, 
  // validate: {
  //   validator: (value: string)=>validator.isAlpha(value),
  //   message: '{VALUE} is not a setup properly!'
  // }
},
});
const guardianSchema = {
  fathersName: { type: String, required: true },
  fathersOccupation: { type: String, required: true },
  fathersContactNo: { type: String, required: true },
  mothersName: { type: String, required: true },
  mothersOccupation: { type: String, required: true },
  mothersContactNo: { type: String, required: true },
};
const localGuardianSchema = {
  name: { type: String, required: true },
  occupation: { type: String, required: true },
  contactNo: { type: String, required: true },
  address: { type: String, required: true },
};

const studentSchema = new Schema<Student>({
  id: { type: String, required: true, unique: true },
  name: {
    type: userNameSchema,
    required: true,
  },
  gender: {
    type: String,
    enum: {
      values: ['Male', 'Female', "Other"],
      message: '{VALUE} is not supported!'
      // or
      // message: "The gender field must be one of the following: 'Male', 'Female', or 'Other'",
    },
required: true
  },
  DOB: { type: String },
  isMarried: {
    type: Boolean,
  },
  email: { type: String, required: true, unique: true,
    // validate: {
    //   validator: (value: string)=>validator.isEmail(value),
    // },
   },
  contactNo: { type: String, required: true },
  emegencyContactNo: { type: String },
  permanentAddress: { type: String, required: true },
  presentAddress: { type: String, required: true },
  bloodGroup: {
    type: String,
    enum: ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'],
  },
  guardian: {
    type: guardianSchema,
    required: true
  },
  localGuardian: {
    type: localGuardianSchema,
    required: true
  },
  profileImg: { type: String, required: true },
  isActive: {
    type: String,
    enum: ['active', 'blocked'],
    default: "active"
  },
});

// create model
export const StudentModel = model<Student>('Student', studentSchema);
